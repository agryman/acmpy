"""This module tests the hamiltonian_data.py module."""

import pytest
from math import isclose
from acmpy.hamiltonian_data import RWC_alam, RWC_alam_clam, A0_case1, A0_case2_approx, A0_case3_approx


class TestRWC_alam:
    """Tests the function RWC_alam()."""

    @pytest.mark.parametrize(
        "B,expected", [
            (1, 1.679773843),
            (2, 2.202720480),
            (3, 2.599308117),
            (4, 2.933304638),
            (5, 3.228085199),
            (6, 3.495276885),
            (7, 3.741657387),
            (8, 3.971589562),
            (9, 4.188080238),
            (10, 4.393307804),
            (11, 4.588911801),
            (12, 4.776163871),
            (13, 4.956074575),
            (14, 5.129463264),
            (15, 5.297005523),
            (16, 5.459266423),
            (17, 5.616724464),
            (18, 5.769789201),
            (19, 5.918814489),
            (20, 6.064108623)
        ]
    )
    def test_c1_pos(self, B, expected):
        alam: tuple[float, float] = RWC_alam(B, 3.0, 2.0)
        assert isclose(alam[0], expected)
        assert isclose(alam[1], 2.5)

    @pytest.mark.parametrize(
        "B, expected", [
            (1, (1.596591959, 3.430039445)),
            (2, (2.055592205, 4.506160272)),
            (3, (2.384878618, 5.521779625)),
            (4, (2.656453294, 6.501015450)),
            (5, (2.894431016, 7.459863470)),
            (6, (3.109778739, 8.406526220)),
            (7, (3.308483497, 9.345457850)),
            (8, (3.494224299, 10.27924346)),
            (9, (3.669455258, 11.20946940)),
            (10, (3.835914290, 12.13715436)),
            (11, (3.994888985, 13.06297738)),
            (12, (4.147367399, 13.98740545)),
            (13, (4.294129216, 14.91076835)),
            (14, (4.435803810, 15.83330432)),
            (15, (4.572908819, 16.75518890)),
            (16, (4.705876717, 17.67655374)),
            (17, (4.835073664, 18.59749909)),
            (18, (4.960813242, 19.51810236)),
            (19, (5.083366677, 20.43842406)),
            (20, (5.202970609, 21.35851201))
        ]
    )
    def test_c1_neg(self, B, expected):
        alam: tuple[float, float] = RWC_alam(B, -3.0, 2.0)
        assert isclose(alam[0], expected[0])
        assert isclose(alam[1], expected[1])

    @pytest.mark.parametrize(
        "B,expected", [
            (10, (3.835914290, 12.137154360)),
            (20, (5.202970609, 21.358512010)),
            (30, (6.273136767, 30.552276360)),
            (40, (7.184399229, 39.740744290)),
            (50, (7.992004307, 48.927578310)),
            (60, (8.724988555, 58.113769900)),
            (70, (9.400900525, 67.299668600)),
            (80, (10.031318620, 76.485420000)),
            (90, (10.624362200, 85.671091900)),
            (100, (11.185987180, 94.856719000))
        ]
    )
    def test_c1_neg_large_B(self, B, expected):
        alam: tuple[float, float] = RWC_alam(B, -3.0, 2.0)
        assert isclose(alam[0], expected[0])
        assert isclose(alam[1], expected[1])


class TestRWC_alam_clam:
    """Tests the function RWC_alam_clam()."""

    @pytest.mark.parametrize(
        "B,expected", [
            (1, 1.679773843),
            (2, 2.202720480),
            (3, 2.599308117),
            (4, 2.933304638),
            (5, 3.228085199),
            (6, 3.495276885),
            (7, 3.741657387),
            (8, 3.971589562),
            (9, 4.188080238),
            (10, 4.393307804),
            (11, 4.588911801),
            (12, 4.776163871),
            (13, 4.956074575),
            (14, 5.129463264),
            (15, 5.297005523),
            (16, 5.459266423),
            (17, 5.616724464),
            (18, 5.769789201),
            (19, 5.918814489),
            (20, 6.064108623)
        ]
    )
    def test_c1_pos(self, B, expected):
        alam: tuple[float, float] = RWC_alam_clam(B, 3.0, 2.0)
        assert isclose(alam[0], expected)
        assert isclose(alam[1], 2.5)

    @pytest.mark.parametrize(
        "B,expected", [
            (1, 1.414213562),
            (2, 1.677073391),
            (3, 1.821015022),
            (4, 1.911011443),
            (5, 1.971014648),
            (6, 2.012729611),
            (7, 2.042670180),
            (8, 2.064734587),
            (9, 2.081368768),
            (10, 2.094162138),
            (11, 2.104177355),
            (12, 2.112142508),
            (13, 2.118567416),
            (14, 2.123816133),
            (15, 2.128153304),
            (16, 2.131774475),
            (17, 2.134826310),
            (18, 2.137420334),
            (19, 2.139642428),
            (20, 2.141559504)
        ]
    )
    def test_c1_neg(self, B, expected):
        alam: tuple[float, float] = RWC_alam_clam(B, -3.0, 2.0)
        assert isclose(alam[0], expected)
        assert isclose(alam[1], 2.5)


class TestA0_case1:
    """Tests the function A0_case1()."""

    @pytest.mark.parametrize(
        "B, c1, expected", [
            (10, 1, 10.0),
            (10, 2, 14.142135623730951),
            (10, 3, 17.32050807568877),
            (20, 1, 20.0),
            (20, 2, 28.284271247461902),
            (20, 3, 34.64101615137754),
            (30, 1, 30.0),
            (30, 2, 42.42640687119285),
            (30, 3, 51.96152422706631)
        ]
    )
    def test_ok(self, B, c1, expected):
        A0: float = A0_case1(B, c1)
        assert isclose(A0, expected)


class TestA0_case2_approx:
    """Tests the function A0_case2_approx()."""

    @pytest.mark.parametrize(
        "B,c2,v,expected", [
            (10, 1, 0, 8.879040017426005),
            (10, 1, 1, 9.654893846056297),
            (10, 1, 2, 10.32280115456367),
            (10, 2, 0, 11.186889420813966),
            (10, 2, 1, 12.164403991146798),
            (10, 2, 2, 13.005914468513868),
            (10, 3, 0, 12.80579164987494),
            (10, 3, 1, 13.924766500838334),
            (10, 3, 2, 14.888055529538272),
            (20, 1, 0, 14.094597464129782),
            (20, 1, 1, 15.32618864787106),
            (20, 1, 2, 16.386425412012915),
            (20, 2, 0, 17.75808003485201),
            (20, 2, 1, 19.309787692112593),
            (20, 2, 2, 20.64560230912734),
            (20, 3, 0, 20.327927136297067),
            (20, 3, 1, 22.104188991842317),
            (20, 3, 2, 23.63331500935002),
            (30, 1, 0, 18.469147504478332),
            (30, 1, 1, 20.08298850246508),
            (30, 1, 2, 21.472291690189408),
            (30, 2, 0, 23.269667714505616),
            (30, 2, 1, 25.30297995905247),
            (30, 2, 2, 27.0533922899524),
            (30, 3, 0, 26.637120052278018),
            (30, 3, 1, 28.964681538168886),
            (30, 3, 2, 30.968403463691008)
        ]
    )
    def test_ok(self, B, c2, v, expected):
        A0: float = A0_case2_approx(B, c2, v)
        assert isclose(A0, expected)


class TestA0_case3_approx:
    """Tests the A0_case3_approx() function."""

    @pytest.mark.parametrize(
        "B,expected", [
            (10, 9.146912192286944),
            (20, 12.935687276168014),
            (30, 15.84291664941221),
            (40, 18.293824384573888),
            (50, 20.453117446175234),
            (60, 22.40526759314526),
            (70, 24.20045492493587),
            (80, 25.87137455233603),
            (90, 27.440736576860832),
            (100, 28.925076085190778)
        ]
    )
    def test_ok(self, B, expected):
        A0: float = A0_case3_approx(B, -3.0, 2.0, 0)
        assert isclose(A0, expected)