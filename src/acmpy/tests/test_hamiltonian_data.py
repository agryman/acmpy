"""This module tests the hamiltonian_data.py module."""

import pytest
from math import isclose
from acmpy.hamiltonian_data import RWC_alam, RWC_alam_clam


class TestRWC_alam:
    """Tests the RWC_alam() function."""

    @pytest.mark.parametrize(
        "B,expected", [
            (1, 1.679773843),
            (2, 2.202720480),
            (3, 2.599308117),
            (4, 2.933304638),
            (5, 3.228085199),
            (6, 3.495276885),
            (7, 3.741657387),
            (8, 3.971589562),
            (9, 4.188080238),
            (10, 4.393307804),
            (11, 4.588911801),
            (12, 4.776163871),
            (13, 4.956074575),
            (14, 5.129463264),
            (15, 5.297005523),
            (16, 5.459266423),
            (17, 5.616724464),
            (18, 5.769789201),
            (19, 5.918814489),
            (20, 6.064108623)
        ]
    )
    def test_c1_pos(self, B, expected):
        alam: tuple[float, float] = RWC_alam(B, 3.0, 2.0)
        assert isclose(alam[0], expected)
        assert isclose(alam[1], 2.5)

    @pytest.mark.parametrize(
        "B, expected", [
            (1, (1.596591959, 3.430039445)),
            (2, (2.055592205, 4.506160272)),
            (3, (2.384878618, 5.521779625)),
            (4, (2.656453294, 6.501015450)),
            (5, (2.894431016, 7.459863470)),
            (6, (3.109778739, 8.406526220)),
            (7, (3.308483497, 9.345457850)),
            (8, (3.494224299, 10.27924346)),
            (9, (3.669455258, 11.20946940)),
            (10, (3.835914290, 12.13715436)),
            (11, (3.994888985, 13.06297738)),
            (12, (4.147367399, 13.98740545)),
            (13, (4.294129216, 14.91076835)),
            (14, (4.435803810, 15.83330432)),
            (15, (4.572908819, 16.75518890)),
            (16, (4.705876717, 17.67655374)),
            (17, (4.835073664, 18.59749909)),
            (18, (4.960813242, 19.51810236)),
            (19, (5.083366677, 20.43842406)),
            (20, (5.202970609, 21.35851201))
        ]
    )
    def test_c1_neg(self, B, expected):
        alam: tuple[float, float] = RWC_alam(B, -3.0, 2.0)
        assert isclose(alam[0], expected[0])
        assert isclose(alam[1], expected[1])


class TestRWC_alam_clam:
    """Tests the RWC_alam_clam() function."""

    @pytest.mark.parametrize(
        "B,expected", [
            (1, 1.414213562),
            (2, 1.677073391),
            (3, 1.821015022),
            (4, 1.911011443),
            (5, 1.971014648),
            (6, 2.012729611),
            (7, 2.042670180),
            (8, 2.064734587),
            (9, 2.081368768),
            (10, 2.094162138),
            (11, 2.104177355),
            (12, 2.112142508),
            (13, 2.118567416),
            (14, 2.123816133),
            (15, 2.128153304),
            (16, 2.131774475),
            (17, 2.134826310),
            (18, 2.137420334),
            (19, 2.139642428),
            (20, 2.141559504)
        ]
    )
    def test_c1_neg(self, B, expected):
        alam: tuple[float, float] = RWC_alam_clam(B, -3.0, 2.0)
        assert isclose(alam[0], expected)
        assert isclose(alam[1], 2.5)
